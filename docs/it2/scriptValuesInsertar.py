from faker import Fakerfrom faker.providers import DynamicProviderfrom datetime import datetimefrom datetime import datetime, timedeltaimport randomfake = Faker('es_CO')fecha_inicial = datetime(1990, 1, 1)# Definir la fecha final (límite hasta el año 2024)fecha_final = datetime(2024, 12, 31)reservas=[]consumos=[]class Tiposhab:    def __init__(self, id):  # Fixed typo here (__init__ instead of _init_)        self.tipo= fake.random_element(elements=['suite', 'suite presidencial', 'familiar', 'doble','sencilla'])        self.descripcion = fake.text(max_nb_chars=50)        self.id = id    def sql_add(self):        return f"INSERT INTO tiposhab (tipo, descripcion, id) VALUES ('{self.tipo}', '{self.descripcion}', {self.id});"class Tiposusuario:    def __init__(self, id):  # Fixed typo here (__init__ instead of _init_)        self.id = id        self.tipo= fake.random_element(elements=['cliente', 'recepcionista', 'empleados', 'administrador','gerente'])        self.descripcion = fake.text(max_nb_chars=50)          def sql_add(self):        return f"INSERT INTO tiposusuario (id, tipo, descripcion) VALUES ({self.id}, '{self.tipo}', '{self.descripcion}');"class User:    def __init__(self, id):  # Fixed typo here (__init__ instead of _init_)        self.id = id        self.nombre = fake.name()        self.cedula = fake.numerify(text='#########')        self.tipoid = 2    def sql_add(self):        return f"INSERT INTO USUARIOS (id, nombre, cedula, tipoid) VALUES ({self.id}, '{self.nombre}', '{self.cedula}', {self.tipoid});"class PlanConsumo:    def __init__(self, id):  # Fixed typo here (__init__ instead of _init_)        self.tipo = fake.random_element(elements=['Luxury', 'Executive', 'Comfort', 'Economy', 'Family', 'Business', 'Deluxe', 'Eco', 'Adventure', 'Romantic', 'Stay', 'Escape', 'Experience', 'Retreat', 'Package', 'Getaway', 'Deal', 'Pass', 'Special', 'Offer', 'Todo incluido', 'Larga Estadia','Tiempo Compartido'])        self.dtonoche = fake.random_int(min=1, max=100, step=1)        self.descripcion = fake.text(max_nb_chars=50)        self.descuentobar = fake.random_int(min=0, max=100, step=1)        self.descuentorest = fake.random_int(min=0, max=100, step=1)        self.descuentospa = fake.random_int(min=0, max=100, step=1)        self.limitebebidas = fake.random_int(min=0, max=10, step=1)        self.descuentolavado = fake.random_int(min=0, max=100, step=1)        self.id = id    def sql_add(self):        return f"INSERT INTO planesconsumo (tipo, dtonoche, descripcion, descuentobar, descuentorest, descuentospa, limitebebidas, descuentolavado,  id ) VALUES ('{self.tipo}', {self.dtonoche}, '{self.descripcion}', {self.descuentobar}, {self.descuentorest}, {self.descuentospa}, {self.limitebebidas},{self.descuentolavado}, {self.id});"class Habitacion:    def __init__(self, id):  # Fixed typo here (__init__ instead of _init_)        self.id = id        self.capacidad = fake.random_int(min=1, max=8, step=1)        self.tipoid = fake.random_int(min=1, max=5, step=1)    def sql_add(self):        return f"INSERT INTO habitacion (id, capacidad, tipoid) VALUES ({self.id}, {self.capacidad}, {self.tipoid});""""fecha_inicial = datetime(2022, 1, 1)# Definir la fecha final (límite hasta el año 2024)fecha_final = datetime(2024, 12, 31)# Generar una fecha aleatoria entre la fecha inicial y la fecha finalfecha_aleatoria = fecha_inicial + (fecha_final - fecha_inicial) * random.random()"""class Reservas:        def __init__(self, id):  # Fixed typo here (__init__ instead of _init_)        fechaentrada = fecha_inicial + (fecha_final - fecha_inicial) * random.random()# Suponiendo que fecha_final es la última fecha posible (ej. 31 de diciembre del mismo año)        fin_de_año = datetime(fechaentrada.year, 12, 31)# Generar una fecha aleatoria entre fechaentrada y fin_de_año.        if (fin_de_año - fechaentrada).days > 0:            dias_random = random.randint(1, (fin_de_año - fechaentrada).days)        else:            # Si no hay diferencia de días, usa el mismo día            dias_random = 0        fechasalida = fechaentrada + timedelta(days=dias_random)          self.id = id        self.fechaentrada=fechaentrada.replace(microsecond=0)        self.fechasalida=fechasalida.replace(microsecond=0)        self.numpersonas = fake.random_int(min=1, max=6, step=1)        self.estado = fake.random_element(elements=['0', '1'])        self.precioreserva = fake.random_int(min=10, max=100000, step=1)        self.usuariosid = fake.random_int(min=10, max=46000, step=1)        self.planid = fake.random_int(min=1, max=30, step=1)        self.habitacionid = fake.random_int(min=1, max=46000, step=1)            def getFechaReserva(self):        return self.fechaentrada, self.fechasalida    def getReservaPorID(self, id):        if self.id == id:            return self           def sql_add(self):        return f"INSERT INTO reservas (id, fechaentrada, fechasalida, numpersonas, estado, precioreserva, usuariosid, planid,  habitacionid ) VALUES ({self.id},TO_DATE('{self.fechaentrada}', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('{self.fechasalida}', 'YYYY-MM-DD HH24:MI:SS'), {self.numpersonas}, '{self.estado}' ,{self.precioreserva}, {self.usuariosid},{self.planid}, {self.habitacionid});"class Consumos:    def __init__(self, id):          self.id=id        fecha=fecha_inicial + (fecha_final - fecha_inicial) * random.random()         self.fecha=fecha.replace(microsecond=0)            def getFechaConsumoPorID(self):        return self.fecha            def sql_add(self):        return f"INSERT INTO consumos (id, fecha ) VALUES ({self.id}, TO_DATE('{self.fecha}', 'YYYY-MM-DD HH24:MI:SS'));"        class consumoder:    def __init__(self, id):          self.reservasid = fake.random_int(min=1, max=46000, step=1)        reserva = reservas[self.reservasid - 1]        rta = True        i=0        while rta:            consumoid = fake.random_int(min=1, max=46000, step=1)            c = consumos[consumoid - 1]            reserva_fecha_inicio = reserva.getFechaReserva()[0]            reserva_fecha_fin = reserva.getFechaReserva()[1]            consumo_fecha = c.getFechaConsumoPorID()            if consumo_fecha >= reserva_fecha_inicio and consumo_fecha <= reserva_fecha_fin:                self.consumoid = consumoid                rta = False            elif i>1000:                self.consumoid = consumoid                rta = False            i+=1                    def sql_add(self):        return f"INSERT INTO consumoder (reservasid, consumoid) VALUES ({self.reservasid}, {self.consumoid});"        class Producto:    def __init__(self, id):        self.nombre = fake.word()        self.consumoid = fake.random_int(min=1, max=100, step=1)        self.id = id        self.tiendaid = fake.random_int(min=1, max=100, step=1)        self.smercadoid = fake.random_int(min=1, max=100, step=1)        self.preciofinal = random.randint(1000,1000000)    def sql_add(self):        return f"INSERT INTO productos (nombre, consumoid, id, tiendaid, smercadoid, preciofinal ) VALUES ('{self.nombre}', {self.consumoid}, {self.id}, {self.tiendaid}, {self.smercadoid}, {self.preciofinal});"class Servicio:    def __init__(self, id):        self.id = id        self.descripcion = fake.random_element(elements=['Piscina', 'Gimnasio', 'Internet', 'Lavado, planchado','Restaurante', 'Bar', 'Super Mercado', 'Tiendas', 'SPA', 'Utensilios', 'Salon de reuniones', 'Salon de conferencias'])        self.precio = random.randint(1000,1000000)        self.consumoid = fake.random_int(min=1, max=46000, step=1)    def sql_add(self):        return f"INSERT INTO servicio (id, descripcion, precio, consumoid) VALUES ({self.id}, '{self.descripcion}', {self.precio}, {self.consumoid});"class Tienda:    def __init__(self, id):        self.nombre = fake.text(max_nb_chars=15)        self.horarioapertura = self.generar_hora_inicial()        self.horariocierre = self.generar_hora_final()        self.capacidad = random.randint(20,150)        self.id = id    def generar_hora_inicial(self):        hora_aleatoria = random.randint(0, 12)        minutos_aleatorios = random.randint(0, 59)        return f"{hora_aleatoria:02d}:{minutos_aleatorios:02d}"     def generar_hora_final(self):        hora_aleatoria = random.randint(13, 23)        minutos_aleatorios = random.randint(0, 59)        return f"{hora_aleatoria:02d}:{minutos_aleatorios:02d}"     def sql_add(self):        return f"INSERT INTO tiendas (nombre, horarioapertura, horariocierre, capacidad, id) VALUES ('{self.nombre}', TO_DATE('{self.horarioapertura}', 'HH24:MI'), TO_DATE('{self.horariocierre}', 'HH24:MI'), {self.capacidad}, {self.id});"class Mercado:    def __init__(self, id):        self.nombre = fake.text(max_nb_chars=15)        self.horarioapertura = self.generar_hora_inicial()        self.horariocierre = self.generar_hora_final()        self.capacidad = random.randint(20,150)        self.id = id    def generar_hora_inicial(self):        hora_aleatoria = random.randint(0, 12)        minutos_aleatorios = random.randint(0, 59)        return f"{hora_aleatoria:02d}:{minutos_aleatorios:02d}"     def generar_hora_final(self):        hora_aleatoria = random.randint(13, 23)        minutos_aleatorios = random.randint(0, 59)        return f"{hora_aleatoria:02d}:{minutos_aleatorios:02d}"     def sql_add(self):        return f"INSERT INTO smercados (nombre, horarioapertura, horariocierre, capacidad, id) VALUES ('{self.nombre}', TO_DATE('{self.horarioapertura}', 'HH24:MI'), TO_DATE('{self.horariocierre}', 'HH24:MI'), {self.capacidad}, {self.id});"class ReservasServicio:    """    self.reservasid = fake.random_int(min=1, max=46000, step=1)    reserva = reservas[self.reservasid - 1]    rta = True    while rta:        consumoid = fake.random_int(min=1, max=46000, step=1)        c = consumos[consumoid - 1]        reserva_fecha_inicio = reserva.getFechaReserva()[0]        reserva_fecha_fin = reserva.getFechaReserva()[1]        consumo_fecha = c.getFechaConsumoPorID()        if consumo_fecha >= reserva_fecha_inicio and consumo_fecha <= reserva_fecha_fin:            self.consumoid = consumoid            rta = False    """    def __init__(self,id):               self.consumoid = fake.random_int(min=1, max=100, step=1)        c = consumos[self.consumoid  - 1]        dia=c.getFechaConsumoPorID()        intervalo_horas = random.randint(1, 7)# Genera una hora aleatoria de inicio entre las 00:00 y las 17:00 (última hora posible: 17:00)        hora_inicial = datetime(dia.year, dia.month, dia.day, random.randint(0, 17 - intervalo_horas), 0, 0)# Calcula la hora final sumando el intervalo de horas a la hora inicial        hora_final = hora_inicial + timedelta(hours=intervalo_horas)        self.a=hora_inicial.replace(microsecond=0)        self.b=hora_final.replace(microsecond=0)        self.precio = random.randint(1000,1000000)        self.descripcion = fake.text(max_nb_chars=50)        self.id = id            def sql_add(self):        return f"INSERT INTO reservasservicio (fechayhorai, fechayhoraf, consumoid, precio, descripcion, id) VALUES (TO_DATE('{self.a}', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('{self.b}', 'YYYY-MM-DD HH24:MI:SS'), {self.consumoid}, {self.precio}, '{self.descripcion}',{self.id});""""aINSERT INTO reservas (id, fechaentrada, fechasalida, numpersonas, estado, precioreserva, usuariosid, planid, habitacionid)VALUES (29160, TO_DATE('2001-09-30 10:13:21', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2001-12-10 10:13:21', 'YYYY-MM-DD HH24:MI:SS'), 5, '1', 17221, 29518, 12, 42151);INSERT INTO consumos (id, fecha ) VALUES (21738, TO_DATE('2001-09-30 10:13:21', 'YYYY-MM-DD HH24:MI:SS'));"""        # Function to generate fake data and print SQL insert statementsdef populate(n):            """for i in range(1, n + 1):        x = User(i)        print(x.sql_add())    for i in range(1, n + 1):        x = PlanConsumo(i)        print(x.sql_add())    for i in range(1, n + 1):        x = Habitacion(i)        print(x.sql_add())        """    for i in range(1, n + 1):        x = Reservas(i)        reservas.append(x)           for i in range(1, n + 1):        x = Consumos(i)        consumos.append(x)        print(x.sql_add())    for i in range(1, n + 1):        x = consumoder(i)        print(x.sql_add())    for i in range(1, n + 1):        x = Producto(i)        print(x.sql_add())    for i in range(1, n + 1):        x = Servicio(i)        print(x.sql_add())    for i in range(1, n + 1):        x = Tienda(i)        print(x.sql_add())    for i in range(1, n + 1):        x = Mercado(i)            print(x.sql_add())       for i in range(1, n + 1):        x = ReservasServicio(i)        print(x.sql_add())      def populateTipos(n):    for i in range(1, n + 1):        x = Tiposhab(i)        print(x.sql_add())        for i in range(1, n + 1):        x = Tiposusuario(i)        print(x.sql_add())                        # Call the populate function to generate data for 10 userspopulate(46000)